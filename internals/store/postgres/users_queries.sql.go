// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_queries.sql

package tablesclea

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, cognito_sub, email)
VALUES ($1, $2, $3)
RETURNING id, cognito_sub, email, created_at, updated_at
`

type CreateUserParams struct {
	ID         pgtype.UUID `json:"id"`
	CognitoSub string      `json:"cognito_sub"`
	Email      string      `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.CognitoSub, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.CognitoSub,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, cognito_sub, email, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) FindUser(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, findUser, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.CognitoSub,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, cognito_sub, email, created_at, updated_at FROM users
`

func (q *Queries) ListAllUsers(ctx context.Context) ([]Users, error) {
	rows, err := q.db.Query(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.CognitoSub,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
