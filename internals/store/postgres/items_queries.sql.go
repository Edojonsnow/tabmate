// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items_queries.sql

package tabmate

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addItemToTable = `-- name: AddItemToTable :one
INSERT INTO items (
    table_code,
    added_by_user_id,
    name,
    price,
    quantity,
    description,
    original_parsed_text
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, table_code, added_by_user_id, name, price, quantity, description, source, original_parsed_text, created_at, updated_at
`

type AddItemToTableParams struct {
	TableCode          string         `json:"table_code"`
	AddedByUserID      pgtype.UUID    `json:"added_by_user_id"`
	Name               string         `json:"name"`
	Price              pgtype.Numeric `json:"price"`
	Quantity           int32          `json:"quantity"`
	Description        pgtype.Text    `json:"description"`
	OriginalParsedText pgtype.Text    `json:"original_parsed_text"`
}

// Adds a single item to a table.
func (q *Queries) AddItemToTable(ctx context.Context, arg AddItemToTableParams) (Items, error) {
	row := q.db.QueryRow(ctx, addItemToTable,
		arg.TableCode,
		arg.AddedByUserID,
		arg.Name,
		arg.Price,
		arg.Quantity,
		arg.Description,
		arg.OriginalParsedText,
	)
	var i Items
	err := row.Scan(
		&i.ID,
		&i.TableCode,
		&i.AddedByUserID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.Description,
		&i.Source,
		&i.OriginalParsedText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteItemFromTable = `-- name: DeleteItemFromTable :exec
DELETE FROM items
WHERE id = $1
`

// Remove an item from a table
func (q *Queries) DeleteItemFromTable(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteItemFromTable, id)
	return err
}

const listItemsInTable = `-- name: ListItemsInTable :many
SELECT id, table_code, added_by_user_id, name, price, quantity, description, source, original_parsed_text, created_at, updated_at FROM items
WHERE table_code = $1
ORDER BY created_at ASC
`

// Retrieves all the items in a table.
func (q *Queries) ListItemsInTable(ctx context.Context, tableCode string) ([]Items, error) {
	rows, err := q.db.Query(ctx, listItemsInTable, tableCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Items{}
	for rows.Next() {
		var i Items
		if err := rows.Scan(
			&i.ID,
			&i.TableCode,
			&i.AddedByUserID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.Description,
			&i.Source,
			&i.OriginalParsedText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsWithUserDetailsInTable = `-- name: ListItemsWithUserDetailsInTable :many
SELECT 
    i.id,
    i.table_code,
    i.added_by_user_id,
    i.name,
    i.price,
    i.quantity,
    i.description,
    i.source,
    i.original_parsed_text,
    i.created_at,
    i.updated_at,
    u.name AS added_by_username,
    u.email AS added_by_email
FROM items i
JOIN users u ON i.added_by_user_id = u.id
WHERE i.table_code = $1
ORDER BY i.created_at ASC
`

type ListItemsWithUserDetailsInTableRow struct {
	ID                 pgtype.UUID        `json:"id"`
	TableCode          string             `json:"table_code"`
	AddedByUserID      pgtype.UUID        `json:"added_by_user_id"`
	Name               string             `json:"name"`
	Price              pgtype.Numeric     `json:"price"`
	Quantity           int32              `json:"quantity"`
	Description        pgtype.Text        `json:"description"`
	Source             pgtype.Text        `json:"source"`
	OriginalParsedText pgtype.Text        `json:"original_parsed_text"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	AddedByUsername    pgtype.Text        `json:"added_by_username"`
	AddedByEmail       string             `json:"added_by_email"`
}

// Retrieves all the items in a table with user details (username).
func (q *Queries) ListItemsWithUserDetailsInTable(ctx context.Context, tableCode string) ([]ListItemsWithUserDetailsInTableRow, error) {
	rows, err := q.db.Query(ctx, listItemsWithUserDetailsInTable, tableCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListItemsWithUserDetailsInTableRow{}
	for rows.Next() {
		var i ListItemsWithUserDetailsInTableRow
		if err := rows.Scan(
			&i.ID,
			&i.TableCode,
			&i.AddedByUserID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.Description,
			&i.Source,
			&i.OriginalParsedText,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AddedByUsername,
			&i.AddedByEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
