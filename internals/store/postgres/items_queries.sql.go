// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: items_queries.sql

package tabmate

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteItemFromTable = `-- name: DeleteItemFromTable :exec
DELETE FROM items
WHERE id = $1
`

// Remove an item from a table
func (q *Queries) DeleteItemFromTable(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteItemFromTable, id)
	return err
}

const listItemsInTable = `-- name: ListItemsInTable :many
SELECT id, table_id, added_by_user_id, name, price, quantity, description, source, original_parsed_text, created_at, updated_at FROM items
WHERE table_id = $1
ORDER BY created_at ASC
`

// Retrieves all the items in a table.
func (q *Queries) ListItemsInTable(ctx context.Context, tableID pgtype.UUID) ([]Items, error) {
	rows, err := q.db.Query(ctx, listItemsInTable, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Items{}
	for rows.Next() {
		var i Items
		if err := rows.Scan(
			&i.ID,
			&i.TableID,
			&i.AddedByUserID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.Description,
			&i.Source,
			&i.OriginalParsedText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
